{"version":3,"sources":["../../../my-react/my-app/src/components/About.js","../../../my-react/my-app/src/components/TextForm.js","../../../my-react/my-app/src/components/Navbar.js","../../../my-react/my-app/src/components/Alert.js","../../../my-react/my-app/src/components/Home.js","../../../my-react/my-app/src/App.js","../../../my-react/my-app/src/reportWebVitals.js","../../../my-react/my-app/src/index.js"],"names":["About","props","console","log","mode","lightTheme","backgroundColor","themeColor","lightBgcolor","color","textColor","darkTheme","darkBgcolor","React","createElement","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","data-bs-parent","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","minuts","countWord","length","trim","split","Fragment","heading","value","onChange","event","target","rows","onClick","newText","toUpperCase","showAlerts","newText2","toLowerCase","words","splitText","index","element","charAt","substr","document","getElementById","select","navigator","clipboard","writeText","newTextE","join","Navbar","concat","Link","to","appTitle","aria-label","aria-current","homePage","textForm","aboutText","role","placeholder","searchText","width","changeThemeColor","toggleMode","htmlFor","Alert","str","alert","slice","msg","Home","homeText","defaultProps","App","setMode","_useState3","_useState4","setAlert","_useState5","borderColor","_useState6","setThemeColor","onChangeColor","clrs","setThemeColors","checked","message","setTimeout","selectedValue","Router","Routes","Route","exact","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"wPAEe,SAASA,EAAMC,GAC1BC,QAAQC,IAAI,eAAeF,EAAMG,MAEjC,IAAMC,EAAa,CACfC,gBAA8B,SAAbL,EAAMG,KAAgBH,EAAMM,WAAWC,aAAe,QACvEC,MAAoB,SAAbR,EAAMG,KAAgBH,EAAMM,WAAWG,UAAY,SAExDC,EAAY,CACdL,gBAA8B,SAAbL,EAAMG,KAAcH,EAAMM,WAAWK,YAAY,QAClEH,MAAmB,SAAbR,EAAMG,KAAgBH,EAAMM,WAAWG,UAAY,SAG/D,OACEG,IAAAC,cAAA,OAAKC,UAAU,YAAYC,MAAOL,GAC9BE,IAAAC,cAAA,MAAIC,UAAU,QAAO,YACrBF,IAAAC,cAAA,OAAKC,UAAU,YAAYE,GAAG,oBAC1BJ,IAAAC,cAAA,OAAKC,UAAU,iBAAiBC,MAAOX,GACnCQ,IAAAC,cAAA,MAAIC,UAAU,oBACdF,IAAAC,cAAA,UAAQE,MAAOL,EAAWI,UAAU,mBAAmBG,KAAK,SAASC,iBAAe,WAAWC,iBAAe,eAAeC,gBAAc,OAAOC,gBAAc,eAAc,sBAI9KT,IAAAC,cAAA,OAAKG,GAAG,cAAcF,UAAU,mCAAmCQ,iBAAe,qBAClFV,IAAAC,cAAA,OAAKC,UAAU,kBACXF,IAAAC,cAAA,cAAQ,4CAAiD,6WAA0WD,IAAAC,cAAA,YAAM,mBAAsB,kDAIvcD,IAAAC,cAAA,OAAKC,UAAU,iBAAiBC,MAAOX,GACnCQ,IAAAC,cAAA,MAAIC,UAAU,oBACdF,IAAAC,cAAA,UAAQE,MAAOL,EAAWI,UAAU,6BAA6BG,KAAK,SAASC,iBAAe,WAAWC,iBAAe,eAAeC,gBAAc,QAAQC,gBAAc,eAAc,sBAIzLT,IAAAC,cAAA,OAAKG,GAAG,cAAcF,UAAU,8BAA8BQ,iBAAe,qBAC7EV,IAAAC,cAAA,OAAKC,UAAU,kBACXF,IAAAC,cAAA,cAAQ,6CAAkD,8WAA2WD,IAAAC,cAAA,YAAM,mBAAsB,kDAIzcD,IAAAC,cAAA,OAAKC,UAAU,iBAAiBC,MAAOX,GACnCQ,IAAAC,cAAA,MAAIC,UAAU,oBACVF,IAAAC,cAAA,UAAQE,MAAOL,EAAWI,UAAU,6BAA6BG,KAAK,SAASC,iBAAe,WAAWC,iBAAe,iBAAiBC,gBAAc,QAAQC,gBAAc,iBAAgB,sBAIjMT,IAAAC,cAAA,OAAMG,GAAG,gBAAgBF,UAAU,8BAA8BQ,iBAAe,qBAC5EV,IAAAC,cAAA,OAAKC,UAAU,kBACXF,IAAAC,cAAA,cAAQ,4CAAiD,8WAA2WD,IAAAC,cAAA,YAAM,mBAAsB,oDChDzc,SAASU,EAASvB,GAE7B,IAAAwB,EACwBC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAuChBI,EAAS,EACTC,EAAY,EACbH,EAAKI,OAAS,IACbD,EAAaH,EAAKK,OAAOC,MAAM,KAAKF,QAGrCD,EAAY,IACXD,EAAS,KAAQC,GAkBvB,OACEnB,IAAAC,cAAAD,IAAAuB,SAAA,KACIvB,IAAAC,cAAA,OAAKC,UAAU,aACXF,IAAAC,cAAA,UAAKb,EAAMoC,SACXxB,IAAAC,cAAA,OAAKC,UAAU,QACXF,IAAAC,cAAA,YAAUC,UAAU,eAAeC,MAAO,CAACV,gBAA8B,SAAbL,EAAMG,KAAeH,EAAMM,WAAWC,aAAa,QAASC,MAAoB,SAAbR,EAAMG,KAAc,QAAQ,SAAUkC,MAAOT,EAAMU,SAvCxK,SAACC,GACnBV,EAAQU,EAAMC,OAAOH,QAsC8LrB,GAAG,8BAA8ByB,KAAK,QAErP7B,IAAAC,cAAA,UAAQC,UAAU,kBAAkB4B,QAnEtB,WAClB,IAAIC,EAAUf,EAAKgB,cAEnBf,EAAQc,GACR3C,EAAM6C,WAAW,2BAA4B,aA+DmB,yBAC5DjC,IAAAC,cAAA,UAAQC,UAAU,uBAAuB4B,QA7D1B,WACnB,IAAII,EAAWlB,EAAKmB,cAEpBlB,EAAQiB,GACR9C,EAAM6C,WAAW,2BAA4B,aAyDyB,yBAClEjC,IAAAC,cAAA,UAAQC,UAAU,uBAAuB4B,QAvDjB,WAG5B,IAFA,IAAIM,EAAQ,GACRC,EAAYrB,EAAKM,MAAM,KAClBgB,EAAQ,EAAGA,EAAQD,EAAUjB,OAAQkB,IAAS,CACnD,IAAMC,EAAUF,EAAUC,GAE1BF,EAAQA,EAAQ,KADLG,EAAQC,OAAO,GAAGR,cAAeO,EAAQE,OAAO,GAAGN,eAGlElB,EAAQmB,GACRhD,EAAM6C,WAAW,0DAA2D,aA8CG,yCAC3EjC,IAAAC,cAAA,UAAQC,UAAU,uBAAuB4B,QAxCpB,WACzBb,EAAQ,IACR7B,EAAM6C,WAAW,iCAAkC,aAsCyB,cACxEjC,IAAAC,cAAA,UAAQC,UAAU,uBAAuB4B,QA1BrB,WACTY,SAASC,eAAe,+BAC9BC,SAETC,UAAUC,UAAUC,UAAU/B,GAC9B5B,EAAM6C,WAAW,8BAA+B,aAqB2B,qBACvEjC,IAAAC,cAAA,UAAQC,UAAU,uBAAuB4B,QAnBnB,WAC1B,IAAIkB,EAAWhC,EAAKM,MAAM,QAC1BL,EAAQ+B,EAASC,KAAK,MACtB7D,EAAM6C,WAAW,gDAAiD,aAgBW,uBAE7EjC,IAAAC,cAAA,OAAKC,UAAU,mBACXF,IAAAC,cAAA,UAAI,4BAEJD,IAAAC,cAAA,SAAIkB,EAAU,cAAYH,EAAKI,OAAO,eACtCpB,IAAAC,cAAA,SAAIiB,EAAO,gBACXlB,IAAAC,cAAA,MAAIC,UAAU,QAAO,cACrBF,IAAAC,cAAA,SAAKe,EAAKI,OAAS,EAAGJ,EAAK,0CCrFxB,SAASkC,EAAO9D,GAC9B,OACCY,IAAAC,cAAA,OAAKC,UAAS,mCAAAiD,OAAqC/D,EAAMG,KAAI,YAAA4D,OAAW/D,EAAMG,KAAI,QAAA4D,OAAO/D,EAAMG,OAC7FS,IAAAC,cAAA,OAAKC,UAAU,mBACdF,IAAAC,cAACmD,IAAI,CAAClD,UAAU,eAAemD,GAAG,KAAKjE,EAAMkE,UAC7CtD,IAAAC,cAAA,UAAQC,UAAU,iBAAiBG,KAAK,SAASC,iBAAe,WAAWC,iBAAe,0BAA0BE,gBAAc,yBAAyBD,gBAAc,QAAQ+C,aAAW,qBAC3LvD,IAAAC,cAAA,QAAMC,UAAU,yBAEjBF,IAAAC,cAAA,OAAKC,UAAU,2BAA2BE,GAAG,0BAC5CJ,IAAAC,cAAA,MAAIC,UAAU,mCACbF,IAAAC,cAAA,MAAIC,UAAU,YACbF,IAAAC,cAACmD,IAAI,CAAClD,UAAU,kBAAkBsD,eAAa,OAAOH,GAAG,KAAKjE,EAAMqE,WAErEzD,IAAAC,cAAA,MAAIC,UAAU,YACbF,IAAAC,cAACmD,IAAI,CAAClD,UAAU,WAAWsD,eAAa,OAAOH,GAAG,aAAajE,EAAMsE,WAEtE1D,IAAAC,cAAA,MAAIC,UAAU,YACbF,IAAAC,cAACmD,IAAI,CAAClD,UAAU,WAAWmD,GAAG,UAAUjE,EAAMuE,aAGhD3D,IAAAC,cAAA,QAAMC,UAAU,SAAS0D,KAAK,UAC7B5D,IAAAC,cAAA,SAAOC,UAAU,oBAAoBG,KAAK,SAASwD,YAAY,YAAYN,aAAW,WACtFvD,IAAAC,cAAA,UAAQC,UAAU,0BAA0BG,KAAK,UAAUjB,EAAM0E,cAInE9D,IAAAC,cAAA,UAAQG,GAAG,iBAAiBD,MAAO,CAAC4D,MAAM,SAAU7D,UAAU,oBAAoBqD,aAAW,yBAAyB7B,SAAUtC,EAAM4E,kBACtIhE,IAAAC,cAAA,UAAQwB,MAAM,SAAQ,sBACrBzB,IAAAC,cAAA,UAAQwB,MAAM,aAAY,cAC1BzB,IAAAC,cAAA,UAAQwB,MAAM,YAAW,aACzBzB,IAAAC,cAAA,UAAQwB,MAAM,SAAQ,SACtBzB,IAAAC,cAAA,UAAQwB,MAAM,QAAO,QACrBzB,IAAAC,cAAA,UAAQwB,MAAM,OAAM,OACpBzB,IAAAC,cAAA,UAAQwB,MAAM,UAAS,WAGxBzB,IAAAC,cAAA,OAAKC,UAAS,oCAAAiD,OAAmD,UAAb/D,EAAMG,KAAe,OAAO,UAC/ES,IAAAC,cAAA,SAAOC,UAAU,mBAAmBG,KAAK,WAAWyB,QAAS1C,EAAM6E,WAAY7D,GAAG,2BAClFJ,IAAAC,cAAA,SAAOC,UAAU,mBAAmBgE,QAAQ,0BAAyB,uBCvC5D,SAASC,EAAM/E,GAU1B,IAA0BgF,EAG5B,OAIEhF,EAAMiF,OAASrE,IAAAC,cAAA,OAAKC,UAAS,eAAAiD,OAAiB/D,EAAMiF,MAAMhE,KAAI,gCAAgCuD,KAAK,SAC/F5D,IAAAC,cAAA,eARsBmE,EAQIhF,EAAMiF,MAAMhE,MAP3BmC,OAAO,GAAGR,cAAcoC,EAAIE,MAAM,IAOQ,KAAGlF,EAAMiF,MAAME,KCnB7D,SAASC,EAAKpF,GAC3B,OACEY,IAAAC,cAAA,WACID,IAAAC,cAAA,UAAI,uBACqBb,EAAMqF,WFyDvCvB,EAAOwB,aAAe,CAClBpB,SAAU,WACVmB,SAAU,UACVd,UAAW,QACXG,WAAY,aGsFDa,MA7If,WAAe,IAAA/D,EACUC,mBAAS,SAAQC,EAAAC,YAAAH,EAAA,GAAlCrB,EAAIuB,EAAA,GAAE8D,EAAO9D,EAAA,GAAuB+D,EACdhE,mBAAS,MAAKiE,EAAA/D,YAAA8D,EAAA,GAAjCR,EAAKS,EAAA,GAAEC,EAAQD,EAAA,GAAAE,EACcnE,mBAAS,CACbd,YAAc,OACdJ,aAAe,OACfE,UAAW,QACXoF,YAAa,cACfC,EAAAnE,YAAAiE,EAAA,GALvBtF,EAAUwF,EAAA,GAAEC,EAAaD,EAAA,GAmD1BlB,EAAmB,SAACrC,GACtB,IAAIyD,EAAiB,QAGjBA,EADe,iBAATzD,EACWA,EAAMC,OAAOH,MAEdE,EAEpBwD,EAjDmB,SAACE,GACpB,IAAItF,EAAc,OACdJ,EAAe,OACfE,EAAc,OACdoF,EAAc,OA0BlB,MAxBY,cAATI,GACCtF,EAAc,YACdJ,EAAe,aACD,aAAT0F,GACLtF,EAAc,UACdJ,EAAe,WACD,UAAT0F,GACLtF,EAAc,UACdJ,EAAe,WACD,SAAT0F,GACLtF,EAAc,UACdJ,EAAe,WACD,QAAT0F,GACLtF,EAAc,UACdJ,EAAe,WACD,WAAT0F,GACLtF,EAAc,UACdJ,EAAe,WACD,UAAT0F,IACLtF,EAAc,OACdF,EAAY,QACZoF,EAAc,QAGX,CACHlF,YAAYA,EACZJ,aAAaA,EACbE,UAAWA,EACXoF,YAAaA,GAeHK,CAAeF,IAER,UAAlBA,IACCR,EAAQ,SACRlC,SAASC,eAAe,0BAA0B4C,SAAS,IAO7DtD,EAAa,SAACuD,EAASnF,GACzB0E,EAAS,CACLR,IAAKiB,EACLnF,KAAMA,IAMVoF,WAAW,WACPV,EAAS,OACV,MAMDd,EAAa,WACf,GAAY,SAAT1E,EACCqF,EAAQ,SACRvF,QAAQC,IAAI,+BAGZoD,SAASC,eAAe,kBAAkBlB,MAAQ,QAClD0D,EAAc,CACVpF,YAAc,OACdJ,aAAe,OACfE,UAAW,QACXoF,YAAa,cAEjBhD,EAAW,+BAAgC,eAE1C,CACD5C,QAAQC,IAAI,+BACZsF,EAAQ,QAGR,IAAIc,EAAgBhD,SAASC,eAAe,kBAAkBlB,MACzC,UAAlBiE,GACC1B,EAAiB0B,GAErBzD,EAAW,8BAA+B,aAIpD,OACEjC,IAAAC,cAAC0F,IAAM,KACH3F,IAAAC,cAAA,OAAKC,UAAU,iCAAiCC,MAAO,CAACV,gBAAwB,UAAPF,EAAe,QAAQG,EAAWK,YAAaH,MAAc,UAAPL,EAAe,QAAQG,EAAWG,YAC7JG,IAAAC,cAACiD,EAAM,CAACxD,WAAYA,EAAYsE,iBAAkBA,EAAkBV,SAAS,YAAYG,SAAS,OAAOE,UAAU,WAAWD,SAAS,YAAYI,WAAW,SAASvE,KAAMA,EAAM0E,WAAYA,IAC/LjE,IAAAC,cAACkE,EAAK,CAACE,MAAOA,IACdrE,IAAAC,cAAA,OAAKC,UAAU,kBACXF,IAAAC,cAAC2F,IAAM,KAMH5F,IAAAC,cAAC4F,IAAK,CAACC,OAAK,EAACC,KAAK,YAAYxD,QAASvC,IAAAC,cAACU,EAAQ,CAACjB,WAAYA,EAAYuC,WAAYA,EAAYT,QAAQ,kCAAkCjC,KAAMA,EAAM0E,WAAYA,MACnKjE,IAAAC,cAAC4F,IAAK,CAACC,OAAK,EAACC,KAAK,SAASxD,QAASvC,IAAAC,cAACd,EAAK,CAACO,WAAYA,EAAYH,KAAMA,MACzES,IAAAC,cAAC4F,IAAK,CAACC,OAAK,EAACC,KAAK,IAAIxD,QAASvC,IAAAC,cAACuE,EAAI,CAACC,SAAS,sBCpInDuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWpE,SAASC,eAAe,SACpDoE,OACH/G,IAAAC,cAACD,IAAMgH,WAAU,KACfhH,IAAAC,cAAC0E,EAAG,QAORqB","file":"static/js/main.c2c40e33.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function About(props) {\n    console.log(\"----qqq-----\"+props.mode);\n\n    const lightTheme = {\n        backgroundColor: props.mode==='dark' ? props.themeColor.lightBgcolor : 'white',\n        color: props.mode==='dark' ? props.themeColor.textColor : 'black'\n    }\n    const darkTheme = {\n        backgroundColor: props.mode==='dark'?props.themeColor.darkBgcolor:'white',\n        color:props.mode==='dark' ? props.themeColor.textColor : 'black'\n    }\n\n  return (\n    <div className=\"container\" style={darkTheme}>\n        <h2 className=\"my-3\">About US</h2>\n        <div className=\"accordion\" id=\"accordionExample\">\n            <div className=\"accordion-item\" style={lightTheme}>\n                <h2 className=\"accordion-header\">\n                <button style={darkTheme} className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n                    Accordion Item #1\n                </button>\n                </h2>\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\n                <div className=\"accordion-body\">\n                    <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                </div>\n                </div>\n            </div>\n            <div className=\"accordion-item\" style={lightTheme}>\n                <h2 className=\"accordion-header\">\n                <button style={darkTheme} className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n                    Accordion Item #2\n                </button>\n                </h2>\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\n                <div className=\"accordion-body\">\n                    <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                </div>\n                </div>\n            </div>\n            <div className=\"accordion-item\" style={lightTheme}>\n                <h2 className=\"accordion-header\">\n                    <button style={darkTheme} className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\n                        Accordion Item #3\n                    </button>\n                </h2>\n                <div  id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\n                    <div className=\"accordion-body\">\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n  )\n}\n","import React, {useState} from 'react'\n\nexport default function TextForm(props) {\n    \n    // Declare a new state variable, which we'll call \"count\"\n    const [text, setText] = useState('');\n    //text = \"New Text\"; // Wrong way to change the state\n    // setText(\"New Text2\"); // Correct way to change the state\n\n    const handleUpClick = () =>{\n        let newText = text.toUpperCase();\n        //setText(\"You have clicked on handleUpclicked!\");\n        setText(newText);\n        props.showAlerts('Converted to Upper Case!', 'success');\n    }\n\n    const handleLowClick = () => {\n        let newText2 = text.toLowerCase();\n        //setText(\"You have clicked on handleLowClicked!\");\n        setText(newText2);\n        props.showAlerts('Converted to Lower Case!', 'success');\n    }\n\n    const handleFirstCharUppClick = () => {\n        let words = \"\";\n        let splitText = text.split(\" \");\n        for (let index = 0; index < splitText.length; index++) {\n            const element = splitText[index];\n            let word = element.charAt(0).toUpperCase()+ element.substr(1).toLowerCase();\n            words = words + \" \"+word;\n        }\n        setText(words);\n        props.showAlerts('Converted First latter capital of every word in string!', 'success');\n    }\n\n    const handleOnChage = (event) => {\n        setText(event.target.value); // Without this you can not change manually textbox value\n    }\n\n    const handleClearTextClick = () =>{\n        setText(\"\");\n        props.showAlerts('All text cleared cuccessfully!', 'success');\n    }\n    \n    let minuts = 0;\n    let countWord = 0;\n    if(text.length > 0){\n        countWord =  text.trim().split(\" \").length;\n    }\n    \n    if(countWord > 0){\n        minuts = 0.008 * countWord;\n    }\n\n    const handleCopyTextClick = () =>{\n        let textArea = document.getElementById(\"exampleFormControlTextarea1\");\n        textArea.select();\n        // Only this line is able to copy code.\n        navigator.clipboard.writeText(text);\n        props.showAlerts('Text copied from clipboard!', 'success');\n    }\n\n    const handleExtraSpaceClick = ()=>{\n        let newTextE = text.split(/[ ]+/);\n        setText(newTextE.join(\" \"));\n        props.showAlerts('Extra space removed from string successfully!', 'success');\n    }\n\n\n  return (\n    <>\n        <div className='container'>\n            <h1>{props.heading}</h1>\n            <div className=\"mb-3\">\n                <textarea className=\"form-control\" style={{backgroundColor :props.mode==='dark'? props.themeColor.lightBgcolor:'white', color: props.mode==='dark'?'white':'black'}} value={text} onChange={handleOnChage} id=\"exampleFormControlTextarea1\" rows=\"10\"></textarea>\n            </div>\n            <button className=\"btn btn-primary\" onClick={handleUpClick}>Convert To Upper Case</button>\n            <button className=\"btn btn-primary ms-1\" onClick={handleLowClick}>Convert To Lower Case</button>\n            <button className=\"btn btn-primary ms-1\" onClick={handleFirstCharUppClick}>Convert First Latter Capital Of Words</button>\n            <button className=\"btn btn-primary ms-1\" onClick={handleClearTextClick}>Clear Text</button>\n            <button className=\"btn btn-primary ms-1\" onClick={handleCopyTextClick}>Copy To Clipboard</button>\n            <button className=\"btn btn-primary ms-1\" onClick={handleExtraSpaceClick}>Remove Extra Space</button>\n        </div>\n        <div className=\"coantainer my-4\">\n            <h1>Your Text Summery Here:-</h1>\n           {/*  <p>{text.split(\" \").length} Words and {text.length} Characters</p> */}\n            <p>{countWord} Words and {text.length} Characters</p>\n            <p>{minuts} Minuts Read</p>\n            <h2 className=\"my-2\">Preview :-</h2>\n            <p>{(text.length > 0)?text:'Please Enter Some text to preview...'}</p>\n            \n        </div>\n    </>\n  )\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nexport default function Navbar(props) {\n\treturn (\n\t\t<nav className={`navbar navbar-expand-lg bg-body-${props.mode} navbar-${props.mode} bg-${props.mode}`}>\n\t\t\t\t<div className=\"container-fluid\">\n\t\t\t\t\t<Link className=\"navbar-brand\" to=\"/\">{props.appTitle}</Link>\n\t\t\t\t\t<button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n\t\t\t\t\t\t<span className=\"navbar-toggler-icon\"></span>\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n\t\t\t\t\t\t<ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n\t\t\t\t\t\t\t<li className=\"nav-item\">\n\t\t\t\t\t\t\t\t<Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">{props.homePage}</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li className=\"nav-item\">\n\t\t\t\t\t\t\t\t<Link className=\"nav-link\" aria-current=\"page\" to=\"/textform\">{props.textForm}</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li className=\"nav-item\">\n\t\t\t\t\t\t\t\t<Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<form className=\"d-flex\" role=\"search\">\n\t\t\t\t\t\t\t<input className=\"form-control me-2\" type=\"search\" placeholder=\"Search...\" aria-label=\"Search\"/>\n\t\t\t\t\t\t\t<button className=\"btn btn-outline-success\" type=\"submit\">{props.searchText}</button>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<select id=\"themeModeChage\" style={{width:\"200px\"}} className=\" mx-5 form-select\" aria-label=\"Default select example\" onChange={props.changeThemeColor}>\n\t\t\t\t\t<option value=\"white\">Choose Theme Color</option>\n\t\t\t\t\t\t<option value=\"lightgray\">Light Gray</option>\n\t\t\t\t\t\t<option value=\"darkgray\">Dark Gray</option>\n\t\t\t\t\t\t<option value=\"green\">Green</option>\n\t\t\t\t\t\t<option value=\"blue\">Blue</option>\n\t\t\t\t\t\t<option value=\"red\">Red</option>\n\t\t\t\t\t\t<option value=\"orange\">Orange</option>\n\t\t\t\t\t</select>\n\n\t\t\t\t\t<div className={`form-check form-switch mx-5 text-${props.mode==='light'?'dark':'light'}`}>\n\t\t\t\t\t\t<input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\" />\n\t\t\t\t\t\t<label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t</nav>\n\t)\n}\n\n/**\n *@var Set props validation\n*/\nNavbar.propTypes = {\n    appTitle: PropTypes.string.isRequired,\n    homeText: PropTypes.string.isRequired,\n    aboutText: PropTypes.string.isRequired,\n    searchText: PropTypes.string.isRequired\n};\n\n/**\n *@var Set props value\n*/\n\nNavbar.defaultProps = {\n    appTitle: 'My React',\n    homeText: 'My Home',\n    aboutText: 'About',\n    searchText: 'Search Me'\n};","\nimport React from 'react'\n\nexport default function Alert(props) {\n    \n    /**\n     * Where props.alert.type = primary, success, warning, danger \n     * */\n\n    /**\n     * @return string\n     * Convert first latter capital of string Exam- success = Success\n     */\n    const convertUppercase = (str) =>{\n        return str.charAt(0).toUpperCase()+str.slice(1);\n    }\n  return (\n    /**\n     * props.alert && :- We are using this because we are passing default value 'null' to alert and setAlert is a object. \n     *  */\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n        <strong>{convertUppercase(props.alert.type)}</strong>: {props.alert.msg}\n        {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function Home(props) {\n  return (\n    <div>\n        <h1>\n            This Is Home Page - {props.homeText}\n        </h1>\n    </div>\n  )\n}\n","// import logo from './logo.svg';\nimport './App.css';\nimport React from \"react\";\nimport {BrowserRouter as Router, Route, Routes} from 'react-router-dom';\nimport { useState } from 'react';\nimport About from './components/About';\nimport TextForm from './components/TextForm';\nimport Navbar from './components/Navbar';\nimport Alert from './components/Alert';\nimport Home from './components/Home';\n\n\nfunction App() {\n\tconst [mode, setMode] = useState('light'); // whether dark mode is enabled or not\n    const [alert, setAlert] = useState(null);\n    const [themeColor, setThemeColor] = useState({\n                                    darkBgcolor : '#fff',\n                                    lightBgcolor : '#fff',\n                                    textColor: 'black',\n                                    borderColor: 'lightgray'\n                                });\n\n    /**\n     *@ Set colors for themes to be applied \n     * */\n    const setThemeColors = (clrs)=>{\n        let darkBgcolor = '#fff';\n        let lightBgcolor = '#fff';\n        let textColor   = '#fff';\n        let borderColor = '#fff';\n\n        if(clrs === 'lightgray'){\n            darkBgcolor = '#bbb4b4d6';\n            lightBgcolor = '#e5e1e1d6';\n        }else if(clrs === 'darkgray'){\n            darkBgcolor = '#767373';\n            lightBgcolor = '#c3bfbf';\n        }else if(clrs === 'green'){\n            darkBgcolor = '#324a32';\n            lightBgcolor = '#99ad99';\n        }else if(clrs === 'blue'){\n            darkBgcolor = '#363b4e';\n            lightBgcolor = '#8e95b1';\n        }else if(clrs === 'red'){\n            darkBgcolor = '#582f2f';\n            lightBgcolor = '#c78080';\n        }else if(clrs === 'orange'){\n            darkBgcolor = '#896c38';\n            lightBgcolor = '#ddc599';\n        }else if(clrs === 'white'){\n            darkBgcolor = '#fff';\n            textColor = 'black';\n            borderColor = 'gray';\n        }\n\n        return {\n            darkBgcolor:darkBgcolor,\n            lightBgcolor:lightBgcolor,\n            textColor: textColor,\n            borderColor: borderColor\n        }\n    }\n\n    /**\n     * @ Manage Theme Background color and text color for\n     */\n    const changeThemeColor = (event) =>{\n        let onChangeColor  = 'white';\n\n        if(typeof event == 'object'){\n            onChangeColor  = event.target.value;\n        }else{\n            onChangeColor = event;\n        }\n        setThemeColor(setThemeColors(onChangeColor));\n    \n        if(onChangeColor === 'white'){\n            setMode('light');\n            document.getElementById('flexSwitchCheckDefault').checked= false;\n        }\n    }\n    \n    /**\n     * Set Application Alerts/Messages\n     */\n    const showAlerts = (message, type) =>{\n        setAlert({\n            msg: message,\n            type: type\n        });\n\n        /**\n         * @ Remove message auto after 2 Sec\n         *  */\n        setTimeout(()=>{\n            setAlert(null);\n        }, 2000);\n    }\n\n    /**\n     * Set Theme Dark/Light mode on click/switch\n     */\n    const toggleMode = () =>{\n        if(mode === 'dark'){\n            setMode('light');\n            console.log(\"-----------a---------------\");\n            //document.body.style.backgroundColor = 'white';\n            //document.body.style.color = 'black';\n            document.getElementById('themeModeChage').value = \"white\";\n            setThemeColor({\n                darkBgcolor : '#fff',\n                lightBgcolor : '#fff',\n                textColor: 'black',\n                borderColor: 'lightgray'\n            });\n            showAlerts(\"Light Mode has been enabled!\", 'success');\n\n        }else{\n            console.log(\"-----------b---------------\");\n            setMode('dark');            \n            //document.body.style.backgroundColor = '#363b4e';\n            //document.body.style.color = 'white';\n            var selectedValue = document.getElementById(\"themeModeChage\").value;\n            if(selectedValue !== 'white'){\n                changeThemeColor(selectedValue);\n            }\n            showAlerts(\"Dark Mode has been enabled!\", 'success');\n        }\n    }\n\n  return (\n    <Router>\n        <div className='container-fluid main_container' style={{backgroundColor: mode==='light'?'white':themeColor.darkBgcolor, color: mode==='light'?'black':themeColor.textColor}}>\n            <Navbar themeColor={themeColor} changeThemeColor={changeThemeColor} appTitle=\"Hcl React\" homePage=\"Home\" aboutText=\"About Us\" textForm=\"Text Form\" searchText=\"Search\" mode={mode} toggleMode={toggleMode}/>\n            <Alert alert={alert} />\n            <div className='container my-3'>\n                <Routes>\n                    {/* exact - attribute- Match exact path of route\n                        /users ---> component 1\n                        /users/home ---> component 2\n                    \n                    */}\n                    <Route exact path=\"/textform\" element={<TextForm themeColor={themeColor} showAlerts={showAlerts} heading=\"Enter The Text To Analyze Below\" mode={mode} toggleMode={toggleMode} />} />\n                    <Route exact path=\"/about\" element={<About themeColor={themeColor} mode={mode} /> }/>\n                    <Route exact path=\"/\" element={<Home homeText=\"Saumy Home\" />} />\n                 \n                </Routes>\n            </div>\n        </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}